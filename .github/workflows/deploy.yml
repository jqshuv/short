name: 🚀 Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4
      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
            version: 9
      - name: 📦 Install Node.js 20
        uses: actions/setup-node@v4
        with:
            node-version: 20.x
            cache: 'pnpm'
      - name: 💽 Setup Enviroment
        run: |
          cp wrangler.example.toml wrangler.toml
          echo "[vars]" >> wrangler.toml
          echo "AUTH_SECRET = \"production_value\" " >> wrangler.toml
          echo "[[kv_namespaces]]" >> wrangler.toml
          echo "binding = \"SHORT_URLS\"" >> wrangler.toml
          echo "id = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"" >> wrangler.toml
        env:
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          KV_NAMESPACE_ID: ${{ secrets.KV_NAMESPACE_ID }}
      - name: ⚙️ Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: 📋 Test
        run: pnpm test

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4
      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
            version: 9
      - name: 📦 Install Node.js 20
        uses: actions/setup-node@v4
        with:
            node-version: 20.x
            cache: 'pnpm'
      - name: 💽 Setup Enviroment
        run: |
          cp wrangler.example.toml wrangler.toml
          echo "[vars]" >> wrangler.toml
          echo "AUTH_SECRET = \"${AUTH_SECRET}\" " >> wrangler.toml
          echo "[[kv_namespaces]]" >> wrangler.toml
          echo "binding = \"SHORT_URLS\"" >> wrangler.toml
          echo "id = \"${KV_NAMESPACE_ID}\"" >> wrangler.toml
        env:
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          KV_NAMESPACE_ID: ${{ secrets.KV_NAMESPACE_ID }}
      - name: 🌑 Deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          environment: production

